AWSTemplateFormatVersion: 2010-09-09
Description:
  "Create staic website hosting infrastructure using S3, CloudFront, Route53 and
  ACM"

Parameters:
  DomainName:
    Type: String
    Description: "The domain name of the website"
    Default: "pernstore.com"

  NetworkStack:
    Type: String
    Default: "pern-network-stack"
    Description: "Name of the network stack"

Resources:
  S3Bucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Ref DomainName
      AccessControl: Private
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html

  CloudFrontOriginAccessControl:
    Type: "AWS::CloudFront::OriginAccessControl"
    Properties:
      OriginAccessControlConfig:
        Description:
          "origin access control(OAC) for allowing cloudfront to access S3
          bucket"
        Name: "OAC-S3-Bucket-6"
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  LambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "LambdaExecutionPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "arn:aws:logs:*:*:*"
              - Effect: "Allow"
                Action:
                  - "ec2:CreateNetworkInterface"
                  - "ec2:DescribeNetworkInterfaces"
                  - "ec2:DeleteNetworkInterface"
                Resource: "*"

  OriginRequestFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: "index.handler"
      Role: !GetAtt LambdaExecutionRole.Arn
      FunctionName: "OriginRequestFunction"
      Code:
        ZipFile: |
          import json
          def handler(event, context):
              request = event["Records"][0]["cf"]["request"]
              headers = request["headers"]
              headers["x-forwarded-for"] = [{"key": "X-Forwarded-For", "value": "random-value-1234567890"}]
              return request
      Runtime: "python3.8"
      Timeout: 10
      MemorySize: 128

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    DependsOn: S3Bucket
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !GetAtt S3Bucket.RegionalDomainName
            Id: "static-hosting"
            S3OriginConfig:
              OriginAccessIdentity: ""
          - DomainName: "pern-store-load-balancer.elb.localhost.localstack.cloud"
            Id: "custom-origin"
            CustomOriginConfig:
              OriginProtocolPolicy: https-only
              OriginSSLProtocols:
                - TLSv1.2
            CustomHeaders:
              Quantity: 1
              Items:
                - HeaderName: "X-Forwarded-For"
                  HeaderValue: "random-value-1234567890"

        CacheBehaviors:
          - PathPattern: "/api/*"
            TargetOriginId: "custom-origin"
            ViewerProtocolPolicy: redirect-to-https
            Compress: false
            ForwardedValues:
              QueryString: true
              Cookies:
                Forward: all
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
              - PUT
              - POST
              - PATCH
              - DELETE
            CachedMethods:
              - GET
              - HEAD
            LambdaFunctionAssociations:
              - EventType: "origin-request"
                LambdaFunctionARN: !GetAtt OriginRequestFunction.Arn
            OriginRequestPolicyId: "658327ea-f89d-4fab-a63d-7e88639e58f6"
          - PathPattern: "/*"
            TargetOriginId: "static-hosting"
            ViewerProtocolPolicy: redirect-to-https
            ForwardedValues:
              QueryString: false
              Cookies:
                Forward: none
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
            CachedMethods:
              - GET
              - HEAD
            Compress: true
            DefaultTTL: 86400
            MaxTTL: 31536000
            MinTTL: 0
        DefaultCacheBehavior:
          TargetOriginId: "static-hosting"
          ViewerProtocolPolicy: redirect-to-https
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachedMethods:
            - GET
            - HEAD
          DefaultTTL: 86400
          MaxTTL: 31536000
          MinTTL: 0
        PriceClass: PriceClass_All
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
        Enabled: true
        Aliases:
          - !Ref DomainName

        DefaultRootObject: index.html

  S3BucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Statement:
          - Effect: "Allow"
            Principal:
              AWS: "*"
            Action: "s3:GetObject"
            Resource: !Sub "arn:aws:s3:::${S3Bucket}/*"

Outputs:
  CloudFrontDomainName:
    Value: !GetAtt CloudFrontDistribution.DomainName
    Description: "The domain name of the CloudFront distribution"
  CloudFrontURL:
    Value: !GetAtt CloudFrontDistribution.DomainName
    Description: "The website URL of the S3 bucket"
    Export:
      Name: !Sub "${AWS::StackName}-CloudFrontURL"
  CertificateArn:
    Value: !Ref CertificateArn
    Description: "The ARN of the ACM certificate"
    Export:
      Name: !Sub "${AWS::StackName}-CertificateArn"
  S3BucketName:
    Value: !Ref S3Bucket
    Description: "The name of the S3 bucket"
    Export:
      Name: !Sub "${AWS::StackName}-S3BucketName"
